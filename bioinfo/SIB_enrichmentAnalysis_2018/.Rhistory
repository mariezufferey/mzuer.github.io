ncol = 2, nrow = 1)
p1
p2
gseaplot(gsea.out_case5, c("PATHWAY1")) # near the left
gseaplot
################3
gseaplot_modif <- function (gseaResult, geneSetID, by = "all", title = "")
{
by <- match.arg(by, c("runningScore", "preranked", "all"))
x <- y <- ymin <- ymax <- xend <- yend <- runningScore <- es <- pos <- geneList <- NULL
gsdata <- gsInfo(gseaResult, geneSetID)
p <- ggplot(gsdata, aes(x = x)) + theme_dose() + xlab("Position in the Ranked List of Genes")
if (by == "runningScore" || by == "all") {
p.res <- p + geom_linerange(aes(ymin = ymin, ymax = ymax))
p.res <- p.res + geom_line(aes(y = runningScore), color = "green",
size = 1)
enrichmentScore <- gseaResult@result[geneSetID, "enrichmentScore"]
es.df <- data.frame(es = which(p$data$runningScore ==
enrichmentScore))
p.res <- p.res + geom_vline(data = es.df, aes(xintercept = es),
colour = "#FA5860", linetype = "dashed")
p.res <- p.res + ylab("Running Enrichment Score")
p.res <- p.res + geom_hline(aes(yintercept = 0))
}
if (by == "preranked" || by == "all") {
df2 <- data.frame(x = which(p$data$position == 1))
df2$y <- p$data$geneList[df2$x]
p.pos <- p + geom_segment(data = df2, aes(x = x, xend = x,
y = y, yend = 0))
p.pos <- p.pos + ylab("Ranked list metric") + xlim(0,
length(p$data$geneList))
}
if (by == "runningScore")
return(p.res)
if (by == "preranked")
return(p.pos)
p.pos <- p.pos + xlab(NULL) + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
gp1 <- ggplot_gtable(ggplot_build(p.res))
gp2 <- ggplot_gtable(ggplot_build(p.pos))
maxWidth = unit.pmax(gp1$widths[2:3], gp2$widths[2:3])
gp1$widths[2:3] <- maxWidth
gp2$widths[2:3] <- maxWidth
text.params <- gpar(fontsize = 15, fontface = "bold", lineheight = 0.8)
textgp <- textGrob(title, gp = text.params)
if (dev.interactive())
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 1, heights = unit(c(0.1,
0.7, 0.7), "null"))))
gp2$vp = viewport(layout.pos.row = 2, layout.pos.col = 1)
grid.draw(gp2)
gp1$vp = viewport(layout.pos.row = 3, layout.pos.col = 1)
grid.draw(gp1)
textgp$vp = viewport(layout.pos.row = 1, layout.pos.col = 1)
grid.draw(textgp)
# invisible(list(runningScore = p.res, preranked = p.pos))
return(textgp)
}
p1 <- gseaplot_modif(gsea.out_case5, c("PATHWAY1")) # near the left
clusterProfiler::gsInfo
clusterProfiler:::gsInfo
getAnywhere("gsInfo")
DOSE:::gsInfo
gseaplot_modif <- function (gseaResult, geneSetID, by = "all", title = "")
{
by <- match.arg(by, c("runningScore", "preranked", "all"))
x <- y <- ymin <- ymax <- xend <- yend <- runningScore <- es <- pos <- geneList <- NULL
gsdata <- DOSE:::gsInfo(gseaResult, geneSetID)
p <- ggplot(gsdata, aes(x = x)) + theme_dose() + xlab("Position in the Ranked List of Genes")
if (by == "runningScore" || by == "all") {
p.res <- p + geom_linerange(aes(ymin = ymin, ymax = ymax))
p.res <- p.res + geom_line(aes(y = runningScore), color = "green",
size = 1)
enrichmentScore <- gseaResult@result[geneSetID, "enrichmentScore"]
es.df <- data.frame(es = which(p$data$runningScore ==
enrichmentScore))
p.res <- p.res + geom_vline(data = es.df, aes(xintercept = es),
colour = "#FA5860", linetype = "dashed")
p.res <- p.res + ylab("Running Enrichment Score")
p.res <- p.res + geom_hline(aes(yintercept = 0))
}
if (by == "preranked" || by == "all") {
df2 <- data.frame(x = which(p$data$position == 1))
df2$y <- p$data$geneList[df2$x]
p.pos <- p + geom_segment(data = df2, aes(x = x, xend = x,
y = y, yend = 0))
p.pos <- p.pos + ylab("Ranked list metric") + xlim(0,
length(p$data$geneList))
}
if (by == "runningScore")
return(p.res)
if (by == "preranked")
return(p.pos)
p.pos <- p.pos + xlab(NULL) + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
gp1 <- ggplot_gtable(ggplot_build(p.res))
gp2 <- ggplot_gtable(ggplot_build(p.pos))
maxWidth = unit.pmax(gp1$widths[2:3], gp2$widths[2:3])
gp1$widths[2:3] <- maxWidth
gp2$widths[2:3] <- maxWidth
text.params <- gpar(fontsize = 15, fontface = "bold", lineheight = 0.8)
textgp <- textGrob(title, gp = text.params)
if (dev.interactive())
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 1, heights = unit(c(0.1,
0.7, 0.7), "null"))))
gp2$vp = viewport(layout.pos.row = 2, layout.pos.col = 1)
grid.draw(gp2)
gp1$vp = viewport(layout.pos.row = 3, layout.pos.col = 1)
grid.draw(gp1)
textgp$vp = viewport(layout.pos.row = 1, layout.pos.col = 1)
grid.draw(textgp)
# invisible(list(runningScore = p.res, preranked = p.pos))
return(textgp)
}
p1 <- gseaplot_modif(gsea.out_case5, c("PATHWAY1")) # near the left
getAnywhere("unit.pmax")
library(grid)
library(ggplot2)
################3
gseaplot_modif <- function (gseaResult, geneSetID, by = "all", title = "")
{
by <- match.arg(by, c("runningScore", "preranked", "all"))
x <- y <- ymin <- ymax <- xend <- yend <- runningScore <- es <- pos <- geneList <- NULL
gsdata <- DOSE:::gsInfo(gseaResult, geneSetID)
p <- ggplot(gsdata, aes(x = x)) + theme_dose() + xlab("Position in the Ranked List of Genes")
if (by == "runningScore" || by == "all") {
p.res <- p + geom_linerange(aes(ymin = ymin, ymax = ymax))
p.res <- p.res + geom_line(aes(y = runningScore), color = "green",
size = 1)
enrichmentScore <- gseaResult@result[geneSetID, "enrichmentScore"]
es.df <- data.frame(es = which(p$data$runningScore ==
enrichmentScore))
p.res <- p.res + geom_vline(data = es.df, aes(xintercept = es),
colour = "#FA5860", linetype = "dashed")
p.res <- p.res + ylab("Running Enrichment Score")
p.res <- p.res + geom_hline(aes(yintercept = 0))
}
if (by == "preranked" || by == "all") {
df2 <- data.frame(x = which(p$data$position == 1))
df2$y <- p$data$geneList[df2$x]
p.pos <- p + geom_segment(data = df2, aes(x = x, xend = x,
y = y, yend = 0))
p.pos <- p.pos + ylab("Ranked list metric") + xlim(0,
length(p$data$geneList))
}
if (by == "runningScore")
return(p.res)
if (by == "preranked")
return(p.pos)
p.pos <- p.pos + xlab(NULL) + theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
gp1 <- ggplot_gtable(ggplot_build(p.res))
gp2 <- ggplot_gtable(ggplot_build(p.pos))
maxWidth = unit.pmax(gp1$widths[2:3], gp2$widths[2:3])
gp1$widths[2:3] <- maxWidth
gp2$widths[2:3] <- maxWidth
text.params <- gpar(fontsize = 15, fontface = "bold", lineheight = 0.8)
textgp <- textGrob(title, gp = text.params)
if (dev.interactive())
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 1, heights = unit(c(0.1,
0.7, 0.7), "null"))))
gp2$vp = viewport(layout.pos.row = 2, layout.pos.col = 1)
grid.draw(gp2)
gp1$vp = viewport(layout.pos.row = 3, layout.pos.col = 1)
grid.draw(gp1)
textgp$vp = viewport(layout.pos.row = 1, layout.pos.col = 1)
grid.draw(textgp)
# invisible(list(runningScore = p.res, preranked = p.pos))
return(textgp)
}
p1 <- gseaplot_modif(gsea.out_case5, c("PATHWAY1")) # near the left
p1
grid.draw(p1)
p1 <- gseaplot_modif(gsea.out_case5, c("PATHWAY1")) # near the left
p2 <- gseaplot_modif(gsea.out_case5, c("PATHWAY2")) # near the left, more sparse
# par(mfrow=c(1,1))
ggarrange(p1, p2,
labels = c("PATHWAY1", "PATHWAY2"),
ncol = 2, nrow = 1)
grid.arrange(p1, p2, nrow=1)
require(gridExtra)
grid.arrange(p1, p2, nrow=1)
?grid.arrange
p1
grid.draw(p1)
dev.off()
p1 <- gseaplot_modif(gsea.out_case5, c("PATHWAY1")) # near the left
p2 <- gseaplot_modif(gsea.out_case5, c("PATHWAY2")) # near the left, more sparse
grid.draw(p1)
dev.off()
grid.draw(p1)
term2gene_case5 <- gseaDT[,c("case5", "gene.ID")]
colnames(term2gene_case5) <- c("term", "name")
gsea.out_case5 <- GSEA(gene_scores, TERM2GENE=term2gene_case5, nPerm=100, pvalueCutoff=1, pAdjustMethod = "BH")
p1 <- gseaplot(gsea.out_case5, c("PATHWAY1")) # near the left
p2 <- gseaplot(gsea.out_case5, c("PATHWAY2")) # near the left, more sparse
# par(mfrow=c(1,1))
grid.arrange(p1, p2, nrow=1)
summary(gsea.out_case5)
# look at adj. pval
gseaplot(gsea.out_case1, "PATHWAY")
gseaplot(gsea.out_case3, "PATHWAY")
gseaplot(gsea.out_case4, "PATHWAY")
gseaplot(gsea.out_case5, c("PATHWAY1")) # near the left
gseaplot(gsea.out_case5, c("PATHWAY2")) # near the left, more sparse
gseaplot(gsea.out_case5, c("PATHWAY1")) # near the left
(2/3)/(5/12)
(2*12)/(3*5)
mat = matrix(c(10,5,30,60), 2,2)
fisher.test(mat, alternative="greater")
mat
(10/30)/(5/60)
?fisher.test
mat = matrix(c(10,5,30,60), 2,2)
fisher.test(mat, alternative="less")
mat = matrix(c(10,5,30,60), 2,2)
fisher.test(mat)
mat = matrix(c(30,60,10,5), 2,2)
fisher.test(mat, alternative="less")
(30/10)/(60/5)
mat = matrix(c(30,60,10,5), 2,2)
fisher.test(mat, alternative="greater")
mat = matrix(c(30,60,10,5), 2,2)
fisher.test(mat)
mat = matrix(c(10,30,5,60), 2,2)
fisher.test(mat)
mat
(10/5)/(30/60)
mat = matrix(c(10,30,5,60), 2,2)
fisher.test(mat, alternative="less")
mat = matrix(c(10,30,5,60), 2,2)
fisher.test(mat, alternative="greater")
mat = matrix(c(5,60,10,30), 2,2)
fisher.test(mat, alternative="greater")
mat = matrix(c(5,60,10,30), 2,2)
fisher.test(mat, alternative="less")
org.Hs.eg.db
?dotplot
hspvalDT <- read.delim("data/HS_pvalues.csv", header=T)
head(hspvalDT)
hspvalDT <- read.delim("data/HS_pvalues.csv", header=T, sep=",")
head(hspvalDT)
hspvalDT
?gseGO
geneList <- sort(setNames(hspvalDT$scores, hspvalDT$gene.ENTREZ.ID))
hs_gseGO <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 100,
pvalueCutoff = 1,
verbose=F)
library(org.Hs.eg.db')
library(org.Hs.eg.db)
hs_gseGO <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 100,
pvalueCutoff = 1,
verbose=F)
geneList <- sort(setNames(hspvalDT$scores, hspvalDT$gene.ENTREZ.ID), decreasing = T)
hs_gseGO <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 100,
pvalueCutoff = 1,
verbose=F)
str(hs_gseGO)
result(hs_gseGO)
(hs_gseGO@result
hs_gseGO@result
str(hs_gseGO@result)
resultDT <- hs_gseGO@result[,c("ID", "p.adjust")]
head(resultDT)
resultDT <- resultDT[order(resultDT$p.adjust),]
head(resultDT)
hs_gseGO <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 10000,
pvalueCutoff = 1,
verbose=F)
hs_gseGO <- gseGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
resultDT <- hs_gseGO@result[,c("ID", "p.adjust")]
resultDT <- resultDT[order(resultDT$p.adjust),]
head(resultDT)
rownames(resultDT)
rownames(resultDT) <- NULL
dotplot(ego, showCategory = 30)
dotplot(hs_gseGO, showCategory = 30)
str(hs_gseGO@result)
?gseGO
str(hs_gseGO)
hs_gseGO@geneSets
hs_gseGO@geneSets[[topGo]]
topGO <- resultDT$ID[1]
hs_gseGO@geneSets[[topGO]]
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
head(rat_DT)
str(hs_gseGO@result)
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
all_t_tests <- apply(rat_DT, 1, function(x) {
t.test(x[cond1_samples], x[cond2_samples])$p.value
})
all_t_tests_adj <- p.adjust(sort(all_t_tests), method="BH")
rat_gseGO <- gseGO(geneList = sort(all_t_tests_adj, decreasing = T),
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
head(all_t_tests_adj)
PROBES <- rownames(rat_DT)
OUT <- select(rat2302.db, keys = PROBES, columns = c("SYMBOL", "ENTREZID", "GENENAME"))
head(OUT)
all_t_tests_adj <- p.adjust(sort(all_t_tests, decreasing = T), method="BH")
all_t_tests_adj <- p.adjust(sort(all_t_tests, decreasing = T), method="BH")
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
head(OUT)
head(names(all_t_tests_adj))
entrez_names <- sapply(names(all_t_tests_adj, function(x) MAP_GENES$ENTREZID[MAP_GENES$PROBEID == x]))
entrez_names <- sapply(names(all_t_tests_adj), function(x) MAP_GENES$ENTREZID[MAP_GENES$PROBEID == x])
head(entrez_names)
head(all_t_tests_adj)
entrez_names <- unlist(sapply(names(all_t_tests_adj), function(x) MAP_GENES$ENTREZID[MAP_GENES$PROBEID == x][1]))
head(entrez_names)
stopifnot(names(entrez_names) == names(all_t_tests_adj))
all_t_tests_adj_entrezNames <- all_t_tests_adj
all_t_tests_adj_entrezNames <- all_t_tests_adj_entrezNames[!is.na(entrez_names)]
names(all_t_tests_adj_entrezNames) <- entrez_names[!is.na(entrez_names)]
rat_gseGO <- gseGO(geneList = all_t_tests_adj_entrezNames,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
head(all_t_tests_adj_entrezNames)
head(geneList)
?org.Hs.eg.db
?org.Rn.eg.db
rat_gseGO <- gseGO(geneList = all_t_tests_adj_entrezNames,
OrgDb = org.Rn.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
matFisher_case5
matFisher_case5 <- table(gseaDT$diff_expr, gseaDT$case5)
matFisher_case5
matFisher_case5_a <- matFisher_case5[,1:2]
matFisher_case5_a
matFisher_case5_b <- matFisher_case5[,c(1,3)]
matFisher_case5_b
str(hs_gseGO@result)
?enrichGO
hs_enrichGO <- enrichGO(geneList = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
hs_enrichGO <- enrichGO(gene = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
hs_enrichGO <- enrichGO(gene = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
# nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
hs_enrichGO <- enrichGO(gene = geneList,
OrgDb = org.Hs.eg.db,
ont = "ALL",
# nPerm = 1000,
pvalueCutoff = 1)
str(hs_enrichGO)
head(hs_enrichGO)
hs_enrichGO
hs_enrichGO
head(geneList)
hs_enrichGO <- enrichGO(gene = names(geneList),
OrgDb = org.Hs.eg.db,
ont = "ALL",
# nPerm = 1000,
pvalueCutoff = 1)
str(hs_enrichGO)
?gseKEGG
head(all_t_tests_adj_entrezNames)
rat_gseKEGG <- gseGO(geneList = all_t_tests_adj_entrezNames,
# OrgDb = org.Rn.eg.db,
organism = "rno",
keyType = "kegg",
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
rat_gseKEGG <- gseKEGG(geneList = all_t_tests_adj_entrezNames,
# OrgDb = org.Rn.eg.db,
organism = "rno",
keyType = "kegg",
ont = "ALL",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
rat_gseKEGG <- gseKEGG(geneList = all_t_tests_adj_entrezNames,
organism = "rno",
keyType = "kegg",
nPerm = 1000,
pvalueCutoff = 1,
verbose=F)
str(rat_gseKEGG)
resultDT <- rat_gseKEGG@result[,c("ID", "p.adjust")]
head(resultDT)
dotplot(rat_gseGO, showCategory = 10)
barplot(rat_gseGO, showCategory = 10)
?barplot
dotplot(rat_gseGO, showCategory = 10)
barplot(rat_gseGO, showCategory = 10)
enrichMap(rat_gseGO)
plotGOgraph(rat_gseGO)
library(topGO)
install.packages("topGO")
biocLite("topGO")
library(topGO)
plotGOgraph(rat_gseGO)
plotGOgraph(rat_gseGO, ontology="ALL")
barplot(rat_gseGO, showCategory = 10)
barplot(rat_gseGO)
?plotGOgraph
plotGOgraph(rat_gseGO)
plotGOgraph
rat_gseGO@ontology
rat_gseGO@ontology <- "BP"
?plotGOgraph
?gseGO
rat_gseGO@setType
rat_gseGO@setType <- "BP"
plotGOgraph(rat_gseGO)
clusterProfiler::barplot
clusterProfiler:::barplot
barplot(hs_enrichGO, showCategory = 10)
str(rat_gseKEGG)
all_fc <- apply(rat_DT, 1, function(x) {
log2(mean(x[cond1_samples])/mean(x[cond2_samples]))
})
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
all_t_tests <- apply(rat_DT, 1, function(x) {
t.test(x[cond1_samples], x[cond2_samples])$p.value
})
all_fc <- apply(rat_DT, 1, function(x) {
log2(mean(x[cond1_samples])/mean(x[cond2_samples]))
})
View(rat_DT)
head(MAP_GENES)
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
all_t_tests <- apply(rat_DT, 1, function(x) {
t.test(x[cond1_samples], x[cond2_samples])$p.value
})
all_fc <- apply(rat_DT, 1, function(x) {
log2(mean(x[cond1_samples])/mean(x[cond2_samples]))
})
head(rat_DT)
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
head(MAP_GENES)
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
dup_mappings <- MAP_GENES$PROBEID[duplicated(MAP_GENES$PROBEID)]
MAP_GENES <- MAP_GENES[!MAP_GENES$PROBEID %in% dup_mappings,]
head(MAP_GENES)
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
dup_mappings <- MAP_GENES$PROBEID[duplicated(MAP_GENES$PROBEID)]
MAP_GENES <- MAP_GENES[!MAP_GENES$PROBEID %in% dup_mappings,]
MAP_GENES <- MAP_GENES[!is.na(MAP_GENES$ENTREZID),]
head(MAP_GENES)
rat_DT <- rat_DT[rownames(rat_DT) %in% MAP_GENES$PROBEID,]
head(rat_DT)
########### DIRECTION UP/DOWN REGULATED
rat_DT <- read.delim("data/rat_KD.txt", header=T, row.names = 1)
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
dup_mappings <- MAP_GENES$PROBEID[duplicated(MAP_GENES$PROBEID)]
MAP_GENES <- MAP_GENES[!MAP_GENES$PROBEID %in% dup_mappings,]
MAP_GENES <- MAP_GENES[!is.na(MAP_GENES$ENTREZID),]
rat_DT <- rat_DT[rownames(rat_DT) %in% MAP_GENES$PROBEID,]
rownames(rat_DT) <- unlist(sapply(rownames(rat_DT), function(x) MAP_GENES$ENTREZID[MAP_GENES$PROBEID == x]))
MAP_GENES <- select(rat2302.db, keys = names(all_t_tests_adj), columns = c("SYMBOL", "ENTREZID", "GENENAME"))
dup_probes <- MAP_GENES$PROBEID[duplicated(MAP_GENES$PROBEID)]
MAP_GENES <- MAP_GENES[!MAP_GENES$PROBEID %in% dup_probes,]
MAP_GENES <- MAP_GENES[!is.na(MAP_GENES$ENTREZID),]
dup_entrez <- MAP_GENES$ENTREZID[duplicated(MAP_GENES$ENTREZID)]
MAP_GENES <- MAP_GENES[!MAP_GENES$ENTREZID %in% dup_entrez,]
rat_DT <- rat_DT[rownames(rat_DT) %in% MAP_GENES$PROBEID,]
rownames(rat_DT) <- unlist(sapply(rownames(rat_DT), function(x) MAP_GENES$ENTREZID[MAP_GENES$PROBEID == x]))
all_t_tests <- apply(rat_DT, 1, function(x) {
t.test(x[cond1_samples], x[cond2_samples])$p.value
})
all_fc <- apply(rat_DT, 1, function(x) {
log2(mean(x[cond1_samples])/mean(x[cond2_samples]))
})
# dataframe with list of scores
resExp <- data.frame(pval = all_t_tests, log2FC = all_fc, name = rownames(rat_DT), stringsAsFactors = FALSE)
head(resExp)
setwd("~/Documents/PhD_courses/SIB_enrichmentAnalysis_2018")
rm(list=ls())
